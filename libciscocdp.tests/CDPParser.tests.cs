namespace libciscocdp.tests
{
    using System;
    using System.Net;
    using System.Net.NetworkInformation;
    using Xunit;

    public class CDPParserTests
    {
        public static readonly byte[] WiresharkFrom2960G = {
            0x00, 0x00, 0x0C, 0x20, 0x00,
            0x02, 0xb4, 0x8f, 0xa4, 0x00, 0x01, 0x00, 0x18,
            0x41, 0x63, 0x63, 0x31, 0x2e, 0x6e, 0x6f, 0x63,
            0x74, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x6c,
            0x6f, 0x63, 0x61, 0x6c, 0x00, 0x05, 0x00, 0xf7,
            0x43, 0x69, 0x73, 0x63, 0x6f, 0x20, 0x49, 0x4f,
            0x53, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
            0x72, 0x65, 0x2c, 0x20, 0x43, 0x32, 0x39, 0x36,
            0x30, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
            0x72, 0x65, 0x20, 0x28, 0x43, 0x32, 0x39, 0x36,
            0x30, 0x2d, 0x4c, 0x41, 0x4e, 0x42, 0x41, 0x53,
            0x45, 0x4b, 0x39, 0x2d, 0x4d, 0x29, 0x2c, 0x20,
            0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
            0x31, 0x35, 0x2e, 0x30, 0x28, 0x31, 0x29, 0x53,
            0x45, 0x33, 0x2c, 0x20, 0x52, 0x45, 0x4c, 0x45,
            0x41, 0x53, 0x45, 0x20, 0x53, 0x4f, 0x46, 0x54,
            0x57, 0x41, 0x52, 0x45, 0x20, 0x28, 0x66, 0x63,
            0x31, 0x29, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e,
            0x69, 0x63, 0x61, 0x6c, 0x20, 0x53, 0x75, 0x70,
            0x70, 0x6f, 0x72, 0x74, 0x3a, 0x20, 0x68, 0x74,
            0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
            0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x63,
            0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x63, 0x68, 0x73,
            0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x0a, 0x43,
            0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
            0x20, 0x28, 0x63, 0x29, 0x20, 0x31, 0x39, 0x38,
            0x36, 0x2d, 0x32, 0x30, 0x31, 0x32, 0x20, 0x62,
            0x79, 0x20, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x20,
            0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2c,
            0x20, 0x49, 0x6e, 0x63, 0x2e, 0x0a, 0x43, 0x6f,
            0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x57,
            0x65, 0x64, 0x20, 0x33, 0x30, 0x2d, 0x4d, 0x61,
            0x79, 0x2d, 0x31, 0x32, 0x20, 0x31, 0x34, 0x3a,
            0x32, 0x36, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72,
            0x6f, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x74,
            0x65, 0x61, 0x6d, 0x00, 0x06, 0x00, 0x1a, 0x63,
            0x69, 0x73, 0x63, 0x6f, 0x20, 0x57, 0x53, 0x2d,
            0x43, 0x32, 0x39, 0x36, 0x30, 0x47, 0x2d, 0x32,
            0x34, 0x54, 0x43, 0x2d, 0x4c, 0x00, 0x02, 0x00,
            0x11, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xcc,
            0x00, 0x04, 0x0a, 0x64, 0x01, 0x12, 0x00, 0x03,
            0x00, 0x16, 0x47, 0x69, 0x67, 0x61, 0x62, 0x69,
            0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
            0x74, 0x30, 0x2f, 0x37, 0x00, 0x04, 0x00, 0x08,
            0x00, 0x00, 0x00, 0x28, 0x00, 0x08, 0x00, 0x24,
            0x00, 0x00, 0x0c, 0x01, 0x12, 0x00, 0x00, 0x00,
            0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x21,
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x1e, 0xf6, 0xc1, 0x78, 0x00, 0xff, 0x00, 0x00,
            0x00, 0x09, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x06,
            0x00, 0x65, 0x00, 0x0b, 0x00, 0x05, 0x01, 0x00,
            0x12, 0x00, 0x05, 0x00, 0x00, 0x13, 0x00, 0x05,
            0x00, 0x00, 0x16, 0x00, 0x11, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x01, 0xcc, 0x00, 0x04, 0x0a, 0x64,
            0x01, 0x12, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
            0xff, 0xff
        };


        [Fact]
        public void ParseFull2960G()
        {
            var parsed = CdpParser.Parse(WiresharkFrom2960G);
            Assert.NotNull(parsed);

            Assert.Equal("Acc1.nocturnal.local", parsed.DeviceId);

            Assert.Equal("cisco WS-C2960G-24TC-L", parsed.Platform);

            Assert.Single(parsed.Addresses);
            Assert.Equal(IPAddress.Parse("10.100.1.18"), parsed.Addresses[0]);

            Assert.Equal("GigabitEthernet0/7", parsed.PortId);

            Assert.True(parsed.HasCapabilities);
            Assert.False(parsed.CanRoute);
            Assert.False(parsed.CanTransparentBridge);
            Assert.False(parsed.CanSourceRouteBridge);
            Assert.True(parsed.CanSwitch);
            Assert.False(parsed.IsHost);
            Assert.True(parsed.IsIGMPCapable);
            Assert.False(parsed.IsRepeater);

            Assert.NotNull(parsed.HelloProtocol);
            Assert.Equal(0x00000C, parsed.HelloProtocol.Oui);
            Assert.Equal(PhysicalAddress.Parse("00-1E-F6-C1-78-00"), parsed.HelloProtocol.SwitchMac);

            Assert.NotNull(parsed.VtpManagementDomain);
            Assert.Empty(parsed.VtpManagementDomain);

            Assert.Equal(101, parsed.NativeVlan);

            Assert.True(parsed.Duplex.HasValue);
            Assert.Equal(ECdpDuplex.Full, parsed.Duplex.Value);

            Assert.True(parsed.TrustBitmap.HasValue);
            Assert.Equal(0, parsed.TrustBitmap);

            Assert.True(parsed.UntrustedPortCoS.HasValue);
            Assert.Equal(0, parsed.UntrustedPortCoS);

            Assert.Single(parsed.Addresses);
            Assert.Equal(IPAddress.Parse("10.100.1.18"), parsed.Addresses[0]);

            Assert.NotNull(parsed.PowerAvailable);
            Assert.Equal(0, parsed.PowerAvailable.RequestId);
            Assert.Equal(1, parsed.PowerAvailable.ManagementId);
            Assert.Equal(uint.MinValue, parsed.PowerAvailable.PowerAvailable);
            Assert.Equal(uint.MaxValue, parsed.PowerAvailable.PowerAvailable2);
        }

        public static readonly byte[] WiresharkCSR1000VIPv4 = {
            0x00, 0x00, 0x0c, 0x20, 0x00, 0x02, 0xb4,
            0x40, 0x98, 0x00, 0x01, 0x00, 0x11, 0x63, 0x73,
            0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x6c, 0x6f,
            0x63, 0x61, 0x6c, 0x00, 0x05, 0x01, 0x05, 0x43,
            0x69, 0x73, 0x63, 0x6f, 0x20, 0x49, 0x4f, 0x53,
            0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
            0x65, 0x20, 0x5b, 0x46, 0x75, 0x6a, 0x69, 0x5d,
            0x2c, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
            0x6c, 0x20, 0x58, 0x45, 0x20, 0x53, 0x6f, 0x66,
            0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x28, 0x58,
            0x38, 0x36, 0x5f, 0x36, 0x34, 0x5f, 0x4c, 0x49,
            0x4e, 0x55, 0x58, 0x5f, 0x49, 0x4f, 0x53, 0x44,
            0x2d, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53,
            0x41, 0x4c, 0x4b, 0x39, 0x2d, 0x4d, 0x29, 0x2c,
            0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
            0x20, 0x31, 0x36, 0x2e, 0x37, 0x2e, 0x32, 0x2c,
            0x20, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
            0x20, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52,
            0x45, 0x20, 0x28, 0x66, 0x63, 0x33, 0x29, 0x0a,
            0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
            0x6c, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
            0x74, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
            0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x63, 0x69,
            0x73, 0x63, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
            0x74, 0x65, 0x63, 0x68, 0x73, 0x75, 0x70, 0x70,
            0x6f, 0x72, 0x74, 0x0a, 0x43, 0x6f, 0x70, 0x79,
            0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x63,
            0x29, 0x20, 0x31, 0x39, 0x38, 0x36, 0x2d, 0x32,
            0x30, 0x31, 0x38, 0x20, 0x62, 0x79, 0x20, 0x43,
            0x69, 0x73, 0x63, 0x6f, 0x20, 0x53, 0x79, 0x73,
            0x74, 0x65, 0x6d, 0x73, 0x2c, 0x20, 0x49, 0x6e,
            0x63, 0x2e, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x69,
            0x6c, 0x65, 0x64, 0x20, 0x54, 0x75, 0x65, 0x20,
            0x32, 0x39, 0x2d, 0x4d, 0x61, 0x79, 0x2d, 0x31,
            0x38, 0x20, 0x31, 0x39, 0x3a, 0x32, 0x33, 0x20,
            0x62, 0x79, 0x20, 0x6d, 0x63, 0x70, 0x72, 0x65,
            0x00, 0x06, 0x00, 0x12, 0x63, 0x69, 0x73, 0x63,
            0x6f, 0x20, 0x43, 0x53, 0x52, 0x31, 0x30, 0x30,
            0x30, 0x56, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x01, 0xcc, 0x00, 0x04, 0xc0,
            0xa8, 0x46, 0x03, 0x00, 0x03, 0x00, 0x14, 0x47,
            0x69, 0x67, 0x61, 0x62, 0x69, 0x74, 0x45, 0x74,
            0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x32, 0x00,
            0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00,
            0x07, 0x00, 0x09, 0xac, 0x18, 0x1e, 0xa0, 0x1c,
            0x00, 0x0b, 0x00, 0x05, 0x01, 0x00, 0x16, 0x00,
            0x11, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xcc,
            0x00, 0x04, 0xc0, 0xa8, 0x46, 0x03
        };

        [Fact]
        public void ParseFullCSR1000VIPv4()
        {
            var parsed = CdpParser.Parse(WiresharkCSR1000VIPv4);
            Assert.NotNull(parsed);

            Assert.Equal("csr.log.local", parsed.DeviceId);

            Assert.Equal("cisco CSR1000V", parsed.Platform);

            Assert.Single(parsed.Addresses);
            Assert.Equal(IPAddress.Parse("192.168.70.3"), parsed.Addresses[0]);

            Assert.Equal("GigabitEthernet2", parsed.PortId);

            Assert.True(parsed.HasCapabilities);
            Assert.True(parsed.CanRoute);
            Assert.False(parsed.CanTransparentBridge);
            Assert.False(parsed.CanSourceRouteBridge);
            Assert.False(parsed.CanSwitch);
            Assert.False(parsed.IsHost);
            Assert.True(parsed.IsIGMPCapable);
            Assert.False(parsed.IsRepeater);

            Assert.NotNull(parsed.OdrPrefixes);
            Assert.Single(parsed.OdrPrefixes);
            Assert.Equal(new IPPrefix { Network = IPAddress.Parse("172.24.30.160"), Length = 28 }, parsed.OdrPrefixes[0]);

            Assert.Null(parsed.HelloProtocol);

            Assert.True(parsed.Duplex.HasValue);
            Assert.Equal(ECdpDuplex.Full, parsed.Duplex);
        }

        public static readonly byte[] WiresharkCSR1000VIPv6 = {
            0x00, 0x00, 0x0c, 0x20, 0x00, 0x02, 0xb4,
            0x2e, 0xe2, 0x00, 0x01, 0x00, 0x11, 0x63, 0x73,
            0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x6c, 0x6f,
            0x63, 0x61, 0x6c, 0x00, 0x05, 0x01, 0x05, 0x43,
            0x69, 0x73, 0x63, 0x6f, 0x20, 0x49, 0x4f, 0x53,
            0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
            0x65, 0x20, 0x5b, 0x46, 0x75, 0x6a, 0x69, 0x5d,
            0x2c, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
            0x6c, 0x20, 0x58, 0x45, 0x20, 0x53, 0x6f, 0x66,
            0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x28, 0x58,
            0x38, 0x36, 0x5f, 0x36, 0x34, 0x5f, 0x4c, 0x49,
            0x4e, 0x55, 0x58, 0x5f, 0x49, 0x4f, 0x53, 0x44,
            0x2d, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53,
            0x41, 0x4c, 0x4b, 0x39, 0x2d, 0x4d, 0x29, 0x2c,
            0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
            0x20, 0x31, 0x36, 0x2e, 0x37, 0x2e, 0x32, 0x2c,
            0x20, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
            0x20, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52,
            0x45, 0x20, 0x28, 0x66, 0x63, 0x33, 0x29, 0x0a,
            0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
            0x6c, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
            0x74, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
            0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x63, 0x69,
            0x73, 0x63, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
            0x74, 0x65, 0x63, 0x68, 0x73, 0x75, 0x70, 0x70,
            0x6f, 0x72, 0x74, 0x0a, 0x43, 0x6f, 0x70, 0x79,
            0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x63,
            0x29, 0x20, 0x31, 0x39, 0x38, 0x36, 0x2d, 0x32,
            0x30, 0x31, 0x38, 0x20, 0x62, 0x79, 0x20, 0x43,
            0x69, 0x73, 0x63, 0x6f, 0x20, 0x53, 0x79, 0x73,
            0x74, 0x65, 0x6d, 0x73, 0x2c, 0x20, 0x49, 0x6e,
            0x63, 0x2e, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x69,
            0x6c, 0x65, 0x64, 0x20, 0x54, 0x75, 0x65, 0x20,
            0x32, 0x39, 0x2d, 0x4d, 0x61, 0x79, 0x2d, 0x31,
            0x38, 0x20, 0x31, 0x39, 0x3a, 0x32, 0x33, 0x20,
            0x62, 0x79, 0x20, 0x6d, 0x63, 0x70, 0x72, 0x65,
            0x00, 0x06, 0x00, 0x12, 0x63, 0x69, 0x73, 0x63,
            0x6f, 0x20, 0x43, 0x53, 0x52, 0x31, 0x30, 0x30,
            0x30, 0x56, 0x00, 0x02, 0x00, 0x49, 0x00, 0x00,
            0x00, 0x03, 0x01, 0x01, 0xcc, 0x00, 0x04, 0xc0,
            0xa8, 0x46, 0x03, 0x02, 0x08, 0xaa, 0xaa, 0x03,
            0x00, 0x00, 0x00, 0x86, 0xdd, 0x00, 0x10, 0x20,
            0x01, 0x0d, 0xb8, 0x00, 0x70, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02,
            0x08, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x86,
            0xdd, 0x00, 0x10, 0xfe, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x15, 0x5d, 0xff, 0xfe,
            0x1c, 0x8e, 0x0c, 0x00, 0x03, 0x00, 0x14, 0x47,
            0x69, 0x67, 0x61, 0x62, 0x69, 0x74, 0x45, 0x74,
            0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x32, 0x00,
            0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x21, 0x00,
            0x07, 0x00, 0x0e, 0x0a, 0x5a, 0x5a, 0x00, 0x18,
            0xac, 0x18, 0x1e, 0xa0, 0x1c, 0x00, 0x0b, 0x00,
            0x05, 0x01, 0x00, 0x16, 0x00, 0x11, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x01, 0xcc, 0x00, 0x04, 0xc0,
            0xa8, 0x46, 0x03
        };

        [Fact]
        public void ParseFullCSR1000VIPv6()
        {
            var parsed = CdpParser.Parse(WiresharkCSR1000VIPv6);
            Assert.NotNull(parsed);

            Assert.Equal("csr.log.local", parsed.DeviceId);

            Assert.Equal("cisco CSR1000V", parsed.Platform);

            Assert.Equal(3, parsed.Addresses.Count);
            Assert.Equal(IPAddress.Parse("192.168.70.3"), parsed.Addresses[0]);
            Assert.Equal(IPAddress.Parse("2001:db8:70::3"), parsed.Addresses[1]);
            Assert.Equal(IPAddress.Parse("fe80::215:5dff:fe1c:8e0c"), parsed.Addresses[2]);

            Assert.Equal("GigabitEthernet2", parsed.PortId);

            Assert.True(parsed.HasCapabilities);
            Assert.True(parsed.CanRoute);
            Assert.False(parsed.CanTransparentBridge);
            Assert.False(parsed.CanSourceRouteBridge);
            Assert.False(parsed.CanSwitch);
            Assert.False(parsed.IsHost);
            Assert.True(parsed.IsIGMPCapable);
            Assert.False(parsed.IsRepeater);

            Assert.NotNull(parsed.OdrPrefixes);
            Assert.Equal(2, parsed.OdrPrefixes.Count);
            Assert.Equal(new IPPrefix { Network = IPAddress.Parse("10.90.90.0"), Length = 24 }, parsed.OdrPrefixes[0]);
            Assert.Equal(new IPPrefix { Network = IPAddress.Parse("172.24.30.160"), Length = 28 }, parsed.OdrPrefixes[1]);

            Assert.Null(parsed.HelloProtocol);

            Assert.True(parsed.Duplex.HasValue);
            Assert.Equal(ECdpDuplex.Full, parsed.Duplex);
        }
    }
}
